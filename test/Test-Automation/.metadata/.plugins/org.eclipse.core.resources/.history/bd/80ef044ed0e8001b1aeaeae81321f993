package Execution;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.AssertJUnit;
import org.testng.asserts.*;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.NoSuchElementException;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;

import Framework.TestData;
import Framework.setupFramework;
import Framework.waitMethods;
import Framework.highlightElement;

public class ___TestcreateNewRequest2 extends setupFramework {

	//private static final DateFormat Calendar = null;
	Date date = new Date();
	
	@BeforeMethod
	@BeforeClass
	public void setUp()  {
		if(driver!= null) {
			driver=getDriver();   //   Also have a valid ChromeDriver here
			//System.out.println("Driver established for: " + driver.getClass());
			//driver.manage().timeouts().wait(Framework.waitMethods.w100);
		}
	}
	

	//Cert test in the event this is starting page for tests
	@Test(priority = 1) //MUST REMAIN #1 ( or zero)
	private void testForCertPage() /*throws InterruptedException */ {
	    try {
	    	//waitMethods.implicitWait(waitMethods.w300);
	    	waitMethods.waiter(waitMethods.w300);
	    	WebElement ele = driver.findElement(By.id("details-button"));  //.click();
	    	highlightElement.highLightElement(driver, ele);
	    	ele.click();

	    	waitMethods.waiter(waitMethods.w300);
	    	
	        WebElement ele2 = driver.findElement(By.partialLinkText("Proceed to localhost")); //.click();
	    	ele2.click();
	        System.out.println("Certificate not found, proceeding to unsecure site");
	    } catch (NoSuchElementException e) {
	        System.out.println("Certificate present, proceeding ");
	    } 
	} 
 
//create New Request Workflow
	

	//=============================================================
	
	
	@Test(priority = 228) //
	public void selectNewRequest2() {         
		//waitMethods.implicitWait(waitMethods.w300);
		//waitMethods.waiter(waitMethods.w1k);	
		WebElement ele = driver.findElement(By.xpath("//*[@id=\"bodyarea\"]/div[1]/a[1]/span")); 
		highlightElement.highLightElement(driver, ele);
		ele.click();
		waitMethods.waiter(waitMethods.w250);
		System.out.println("New Request Button clicked (2)");
	}


	
	@Test(priority = 230) //
	private void selectService2() {
		waitMethods.waiter(waitMethods.w500);       
		WebElement ele = driver.findElement(By.cssSelector("#service_chosen > a > span"));
	    highlightElement.highLightElement(driver, ele);
	    ele.click();
		waitMethods.waiter(waitMethods.w500);
	    System.out.println("Clicked Service Drop down menu (2)");
	} 


	
	
	@Test(priority = 232) // 
	private void selectServiceAcuteCare2() {
		//waitMethods.implicitWait(waitMethods.w300);	
		waitMethods.waiter(waitMethods.w250);
		WebElement ele = driver.findElement(By.cssSelector("#service-chosen-search-result-1")); //.click(); 
		highlightElement.highLightElement(driver, ele);
        ele.click();
		waitMethods.waiter(waitMethods.w250);
        System.out.println("Selected Service 'Acute Care' (2)");
} 

	
	@Test(priority = 234) //
	private void selectRequestPriority2() {
		//waitMethods.implicitWait(waitMethods.w300);	
		waitMethods.waiter(waitMethods.w250);
		WebElement ele = driver.findElement(By.cssSelector("#priority_chosen > a > span")); 
	    highlightElement.highLightElement(driver, ele);
	    ele.click();
		waitMethods.waiter(waitMethods.w250);
		//driver.navigate().back();    //navigate back
	    System.out.println("Selected priority DDL (2)");
	} 


	@Test(priority = 236) 
	private void selectRequestNormalPriority2() {
		//waitMethods.implicitWait(waitMethods.w300);	
		waitMethods.waiter(waitMethods.w250);
		WebElement ele = driver.findElement(By.cssSelector("#priority_chosen > a > span")); 
	    highlightElement.highLightElement(driver, ele);     
	    ele.click();
		waitMethods.waiter(waitMethods.w250);
		//driver.navigate().back();    //navigate back
	    System.out.println("Select Request Normal Priority (2)");
	} 

	
	
	
	@Test(priority = 238) //
	private void inputRequestTitle2() {
		//waitMethods.implicitWait(waitMethods.w300);	
		waitMethods.waiter(waitMethods.w250);
		WebElement ele = driver.findElement(By.name("title")); //.click();  
	    highlightElement.highLightElement(driver, ele);
	    ele.sendKeys("Test Automation " + getDate());
	    //ele.sendKeys("Test Automation " + Date());
		waitMethods.waiter(waitMethods.w250);
	    System.out.println("Input Request Title: Test Automation (2)");
	} 

	
	public String getDate() {
		//SimpleDateFormat dte = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
		//return dte;
		
//		SimpleDateFormat formatter= new SimpleDateFormat("MM-dd  HH:mm");
//		Date date = new Date(System.currentTimeMillis());
//		System.out.println(formatter.format(date));
//		return date;
		
//		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd"); 
//		String dateString = format.format(new Date()); 
//		Date date = format.parse ("2009-12-31");
		
		//String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
		
//		 DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd");
//	      LocalDate localDate = LocalDate.now();
//	      System.out.println(dtf.format(localDate));    // 2021/03/22
		
	      
	      String pattern = "MM/dd";
	      SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

	      String date = simpleDateFormat.format(new Date());
	      System.out.println(date);
	      
	      return date;
		
		
	}
	

}  //class
	